import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

%matplotlib inline

df = pd.read_csv('Bologna/airbnb_bologna_0310_2016-02-07.csv')

df.isnull().sum()

df.drop(['room_id', 'survey_id', 'host_id', 'borough', 'name', 'last_modified', 'latitude', 'longitude', 'location'], axis=1, inplace=True)

df['overall_satisfaction'].fillna(df['overall_satisfaction'].mode()[0], inplace=True)
df['accommodates'].fillna(df['accommodates'].mode()[0], inplace=True)
df['bedrooms'].fillna(df['bedrooms'].mode()[0], inplace=True)
df['bathrooms'].fillna(df['bathrooms'].mode()[0], inplace=True)
df['minstay'].fillna(df['minstay'].mode()[0], inplace=True)

df.isnull().sum()

freq3 = pd.crosstab(index=[df['price']], columns=df['overall_satisfaction'])
freq3.plot()

df.describe()

df['price'].describe()

def change_price(price):
    if price < 25:
        return 'a. 0-25'
    elif price < 50:
        return 'b. 26-50'
    elif price < 75:
        return 'c. 51-75'
    elif price < 100:
        return 'd. 76-100'
    elif price < 150:
        return 'e. 101-150'
    elif price < 200:
        return 'f. 151-200'
    elif price < 300:
        return 'g. 201-300'
    else:
        return 'h. 301-750'
        
df['price'] = df['price'].apply(change_price)

def change_overall_satisfaction(overall_satisfaction):
    if overall_satisfaction > 4:
        return 'a. Excellent'
    elif overall_satisfaction > 3:
        return 'b. Very good'
    elif overall_satisfaction > 2:
        return 'c. Good'
    elif overall_satisfaction > 1:
        return 'd. Fair'
    else:
        return 'e. Poor'
        
df['overall_satisfaction'] = df['overall_satisfaction'].apply(change_overall_satisfaction)

table = pd.crosstab(index=[df['price']], columns=df['overall_satisfaction'])
table

table = pd.crosstab(index=[df['price']], columns=df['overall_satisfaction'])
table.plot()

table = pd.crosstab(index=[df['price'], df['room_type']], columns=df['overall_satisfaction'])
table

freq = pd.crosstab(index=[df['price']], columns=df['overall_satisfaction'])
freq

import scipy.stats as stats

chi_stats = stats.chi2_contingency(freq)
print ('Test t=%f p-value=%f' % (chi_stats[0], chi_stats[1]))
chi_stats

alpha = 0.05

critical_value = crit = stats.chi2.ppf(q = 1 - alpha, # Find the critical value for 95% confidence*
                      df = chi_stats[2]) #degree of freedom
critical_value

x = np.linspace(0, 25, 1000)
plt.plot(x, stats.chi2.pdf(x, chi_stats[2]))
plt.axvline(x=critical_value, ymin=0.05,ymax=0.05, c='r')
plt.annotate('Critical Value = {0:.2f}'.format(critical_value), xy=(critical_value, 0.02), xytext=(critical_value, 0.04), 
            arrowprops=dict(facecolor='black', shrink=0.5), verticalalignment='top' )
plt.fill_between(x, stats.chi2.pdf(x, chi_stats[2]), where= x > critical_value, facecolor='red', interpolate=True)

x = np.linspace(0, 25, 1000)  # set range for x-axis
plt.plot(x, stats.chi2.pdf(x, chi_stats[2]))  # plot chi2 distribution with given degrees of freedom

plt.axvline(x=critical_value, ymin=0.05,ymax=0.05, c='r')
plt.axvline(x=chi_stats[0], ymin=0.05,ymax=0.1, c='r')

plt.annotate('Current Value = {0:.2f}'.format(chi_stats[0]), xy=(chi_stats[0], 0.02), xytext=(chi_stats[0], 0.01))

plt.annotate('Critical Value = {0:.2f}'.format(critical_value), xy=(critical_value, 0.02), xytext=(critical_value, 0.04), 
        arrowprops=dict(facecolor='black', shrink=0.5), verticalalignment='top' )

plt.fill_between(x, stats.chi2.pdf(x, chi_stats[2]), where= x > critical_value, facecolor='red', interpolate=True)

observed_chi_val = chi_stats[0]
#if observed chi-square < critical chi-square, then variables are not related
#if observed chi-square > critical chi-square, then variables are not independent (and hence may be related).
observed_chi_val

if observed_chi_val <= critical_value:
    # observed value is not in critical area therefore we accept null hypothesis
    print ('Null hypothesis cannot be rejected')
else:
    # observed value is in critical area therefore we reject null hypothesis
    print ('reject null hypothesis')

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

from sklearn import tree

df = pd.read_csv('Bologna/airbnb_bologna_0310_2016-02-07.csv')
df.isnull().sum()

df.drop(['room_id', 'survey_id', 'host_id', 'country', 'city', 'borough', 'neighborhood', 'reviews', 'name', 'last_modified', 'latitude', 'longitude', 'location'], axis=1, inplace=True)

df['overall_satisfaction'].fillna(df['overall_satisfaction'].mode()[0], inplace=True)
df['accommodates'].fillna(df['accommodates'].mode()[0], inplace=True)
df['bedrooms'].fillna(df['bedrooms'].mode()[0], inplace=True)
df['bathrooms'].fillna(df['bathrooms'].mode()[0], inplace=True)
df['minstay'].fillna(df['minstay'].mode()[0], inplace=True)

df.isnull().sum()

df.describe()

def change_overall_satisfaction(overall_satisfaction):
    if overall_satisfaction > 4:
        return 'a. Excellent'
    elif overall_satisfaction > 3:
        return 'b. Very good'
    elif overall_satisfaction > 2:
        return 'c. Good'
    elif overall_satisfaction > 1:
        return 'd. Fair'
    else:
        return 'e. Poor'
        
 df['overall_satisfaction'] = df['overall_satisfaction'].apply(change_overall_satisfaction)
 
 df = pd.get_dummies(df, columns=['room_type'])
 
 df.head()
 
 from sklearn import tree
 
 from sklearn.tree import DecisionTreeClassifier, export_graphviz

from sklearn.metrics import accuracy_score, confusion_matrix
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder

features = df.drop(['overall_satisfaction'], axis=1)
target = df[['overall_satisfaction']]

naive_model = DecisionTreeClassifier(random_state=42)
param_model = DecisionTreeClassifier(max_depth=5, min_samples_split=10, min_samples_leaf=10, random_state=42)

def train_and_predict(model, features, target):
    X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.33, random_state=42)
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    print("accuracy score: %.2f" % accuracy_score(y_test, y_pred))
    (tn, fp, fn, tp) = confusion_matrix(y_test, y_pred).ravel()
    print("confusion matrix")
    print("tn, fp, fn, tp")
    print(tn, fp, fn, tp)
    
train_and_predict(naive_model, features, target)

from io import StringIO
dot_data = StringIO()
export_graphviz(naive_model, out_file=dot_data, filled=True, rounded=True, special_characters=True)

import pydotplus
from IPython.display import Image  

graph = pydotplus.graph_from_dot_data(dot_data.getvalue())
Image(graph.create_png())

with open("naive_model.dot", "w") as f:
    f = tree.export_graphviz(naive_model, out_file = f)
    
train_and_predict(param_model, features, target)

from io import StringIO
dot_data = StringIO()
export_graphviz(param_model, out_file=dot_data, filled=True, rounded=True, special_characters=True)

graph = pydotplus.graph_from_dot_data(dot_data.getvalue())
Image(graph.create_png())

with open("param_model.dot", "w") as f:
    f = tree.export_graphviz(naive_model, out_file = f)
    
xtr = features[:100]
xte = features[100:]
ytr = target[:100]
yte = target[100:]

model = DecisionTreeClassifier()
model.fit(xtr, ytr)
pred = model.predict(xte)

pred

from sklearn.metrics import classification_report, confusion_matrix

print("Trained Score: ")
print(confusion_matrix(yte,pred))
print(classification_report(yte,pred))

# Random Forest Model
from sklearn.ensemble import RandomForestClassifier

tree = RandomForestClassifier()
model = tree.fit(xtr,ytr)

pred = model.predict(xte)

pred

print("Real Values: ", str(yte.values))
print("Estimated Values", str(pred))

print("Error: ", str(np.mean(yte.values!=pred)))

print(accuracy_score(yte, pred))
